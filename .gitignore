# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Log/OS Files
*.log

# Android Studio generated files and folders
captures/
.externalNativeBuild/
.cxx/
*.aab
*.apk
output-metadata.json

# IntelliJ
*.iml
.idea/
misc.xml
deploymentTargetDropDown.xml
render.experimental.xml

# Keystore files
*.jks
*.keystore

# Google Services (e.g. APIs or Firebase)
google-services.json

# Android Profiling
*.hprof
npm init -y
npm install express bcrypt jsonwebtoken cors
import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button } from 'react-native';

export default function App() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [token, setToken] = useState(null);
  const [message, setMessage] = useState('');
  const [balance, setBalance] = useState(0);
  const [toUser , setToUser ] = useState('');
  const [amount, setAmount] = useState('');

  const register = async () => {
    const res = await fetch('http://localhost:3000/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password }),
    });
    const data = await res.json();
    setMessage(data.message);
  };

  const login = async () => {
    const res = await fetch('http://localhost:3000/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password }),
    });
    const data = await res.json();
    if (data.token) {
      setToken(data.token);
      setMessage('Login erfolgreich!');
      fetchBalance(data.token);
    } else {
      setMessage(data.message);
    }
  };

  const fetchBalance = async (token) => {
    const res = await fetch('http://localhost:3000/balance', {
      headers: { 'Authorization': `Bearer ${token}` },
    });
    const data = await res.json();
    setBalance(data.balance);
  };

  const pay = async () => {
    const res = await fetch('http://localhost:3000/pay', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify({ to: toUser , amount: Number(amount) }),
    });
    const data = await res.json();
    setMessage(data.message);
    if (data.fromBalance) {
      setBalance(data.fromBalance);
    }
  };

  return (
    <View style={{ padding: 20 }}>
      <Text>Benutzername:</Text>
      <TextInput value={username} onChangeText={setUsername} style={{ borderWidth: 1, marginBottom: 10 }} />
      <Text>Passwort:</Text>
      <TextInput value={password} onChangeText={setPassword} secureTextEntry style={{ borderWidth: 1, marginBottom: 10 }} />
      <Button title="Registrieren" onPress={register} />
      <Button title="Login" onPress={login} />
      <Text style={{ marginTop: 20 }}>{message}</Text>
      {token && (
        <>
          <Text>Aktueller Saldo: {balance}</Text>
          <Text>An:</Text>
          <TextInput value={toUser } onChangeText={setToUser } style={{ borderWidth: 1, marginBottom: 10 }} />
          <Text>Betrag:</Text>
          <TextInput value={amount} onChangeText={setAmount} keyboardType="numeric" style={{ borderWidth: 1, marginBottom: 10 }} />
          <Button title="Zahlen" onPress={pay} />
        </>
      )}
    </View>
  );
}
