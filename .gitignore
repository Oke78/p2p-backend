# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Log/OS Files
*.log

# Android Studio generated files and folders
captures/
.externalNativeBuild/
.cxx/
*.aab
*.apk
output-metadata.json

# IntelliJ
*.iml
.idea/
misc.xml
deploymentTargetDropDown.xml
render.experimental.xml

# Keystore files
*.jks
*.keystore

# Google Services (e.g. APIs or Firebase)
google-services.json

# Android Profiling
*.hprof
npm init -y
npm install express bcrypt jsonwebtoken cors
import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button } from 'react-native';

export default function App() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [token, setToken] = useState(null);
  const [message, setMessage] = useState('');
  const [balance, setBalance] = useState(0);
  const [toUser , setToUser ] = useState('');
  const [amount, setAmount] = useState('');

  const register = async () => {
    const res = await fetch('http://localhost:3000/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password }),
    });
    const data = await res.json();
    setMessage(data.message);
  };

  const login = async () => {
    const res = await fetch('http://localhost:3000/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username, password }),
    });
    const data = await res.json();
    if (data.token) {
      setToken(data.token);
      setMessage('Login erfolgreich!');
      fetchBalance(data.token);
    } else {
      setMessage(data.message);
    }
  };

  const fetchBalance = async (token) => {
    const res = await fetch('http://localhost:3000/balance', {
      headers: { 'Authorization': `Bearer ${token}` },
    });
    const data = await res.json();
    setBalance(data.balance);
  };

  const pay = async () => {
    const res = await fetch('http://localhost:3000/pay', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify({ to: toUser , amount: Number(amount) }),
    });
    const data = await res.json();
    setMessage(data.message);
    if (data.fromBalance) {
      setBalance(data.fromBalance);
    }
  };

  return (
    <View style={{ padding: 20 }}>
      <Text>Benutzername:</Text>
      <TextInput value={username} onChangeText={setUsername} style={{ borderWidth: 1, marginBottom: 10 }} />
      <Text>Passwort:</Text>
      <TextInput value={password} onChangeText={setPassword} secureTextEntry style={{ borderWidth: 1, marginBottom: 10 }} />
      <Button title="Registrieren" onPress={register} />
      <Button title="Login" onPress={login} />
      <Text style={{ marginTop: 20 }}>{message}</Text>
      {token && (
        <>
          <Text>Aktueller Saldo: {balance}</Text>
          <Text>An:</Text>
          <TextInput value={toUser } onChangeText={setToUser } style={{ borderWidth: 1, marginBottom: 10 }} />
          <Text>Betrag:</Text>
          <TextInput value={amount} onChangeText={setAmount} keyboardType="numeric" style={{ borderWidth: 1, marginBottom: 10 }} />
          <Button title="Zahlen" onPress={pay} />
        </>
      )}
    </View>
  );
}
const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const cors = require('cors');
const mongoose = require('mongoose');

const app = express();
app.use(express.json());
app.use(cors());

const JWT_SECRET = 'dein_geheimes_jwt_schluessel';

// MongoDB Verbindung
mongoose.connect('mongodb://localhost:27017/p2p-payments', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB verbunden'))
  .catch(err => console.error('MongoDB Verbindungsfehler:', err));

// Schemas und Modelle

const userSchema = new mongoose.Schema({
  username: { type: String, unique: true },
  passwordHash: String,
  balance: { type: Number, default: 100 },
});

const transactionSchema = new mongoose.Schema({
  from: String,
  to: String,
  amount: Number,
  date: { type: Date, default: Date.now },
});

const User = mongoose.model('User', userSchema);
const Transaction = mongoose.model('Transaction', transactionSchema);

// Middleware zum Verifizieren des JWT
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN
  if (!token) return res.sendStatus(401);

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user; // { username: '...' }
    next();
  });
}

// Registrierung
app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  try {
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ message: 'Benutzer existiert bereits' });
    }
    const passwordHash = await bcrypt.hash(password, 10);
    const user = new User({ username, passwordHash });
    await user.save();
    res.json({ message: 'Benutzer registriert' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Serverfehler' });
  }
});

// Login
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  try {
    const user = await User.findOne({ username });
    if (!user) return res.status(400).json({ message: 'Benutzer nicht gefunden' });

    const valid = await bcrypt.compare(password, user.passwordHash);
    if (!valid) return res.status(400).json({ message: 'Falsches Passwort' });

    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: '1h' });
    res.json({ token });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Serverfehler' });
  }
});

// Saldo abfragen (geschützt)
app.get('/balance', authenticateToken, async (req, res) => {
  try {
    const user = await User.findOne({ username: req.user.username });
    if (!user) return res.status(404).json({ message: 'Benutzer nicht gefunden' });
    res.json({ balance: user.balance });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Serverfehler' });
  }
});

// Zahlung senden (geschützt)
app.post('/pay', authenticateToken, async (req, res) => {
  const fromUser = req.user.username;
  const { to, amount } = req.body;

  if (!to || !amount || amount <= 0) {
    return res.status(400).json({ message: 'Ungültige Eingaben' });
  }

  try {
    const sender = await User.findOne({ username: fromUser });
    const receiver = await User.findOne({ username: to });

    if (!receiver) return res.status(400).json({ message: 'Empfänger nicht gefunden' });
    if (sender.balance < amount) return res.status(400).json({ message: 'Unzureichendes Guthaben' });

    // Transaktion atomar durchführen
    sender.balance -= amount;
    receiver.balance += amount;

    await sender.save();
    await receiver.save();

    // Transaktion speichern
    const transaction = new Transaction({ from: fromUser, to, amount });
    await transaction.save();

    res.json({
      message: `Erfolgreich ${amount} an ${to} gesendet`,
      fromBalance: sender.balance,
      toBalance: receiver.balance,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Serverfehler' });
  }
});

// Transaktionshistorie (geschützt)
app.get('/transactions', authenticateToken, async (req, res) => {
  try {
    const username = req.user.username;
    const transactions = await Transaction.find({
      $or: [{ from: username }, { to: username }]
    }).sort({ date: -1 }).limit(50);
    res.json(transactions);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Serverfehler' });
  }
});

app.listen(3000, () => console.log('Server läuft auf Port 3000'));
